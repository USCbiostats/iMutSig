{
    "collab_server" : "",
    "contents" : "server <- function(input, output) {\n  ########\n  # Page 1  \n  ########\n  addClass(selector = \"body\", class = \"sidebar-collapse\")\n  \n  observeEvent(input$mysidebar,\n               {\n                 # for desktop browsers\n                 addClass(selector = \"body\", class = \"sidebar-collapse\")\n                 # for mobile browsers\n                 removeClass(selector = \"body\", class = \"sidebar-open\")\n               })\n  \n  index <- reactive({\n    as.numeric(input$N_D)\n  })\n  \n  indexS <- reactive({\n    as.numeric(input$N_D_S)\n  })\n\n  rank1 <- reactive({\n    as.numeric(gsub(\"[^0-9.]\", \"\", names(sort(corr_mat[index(),], decreasing = TRUE)[1:1])))\n  })\n  \n  \n  output$mytable1 = renderDataTable({\n    table <- cbind(`COSMIC Signature` = paste0(\"F\", 1:dim(corr_mat)[2]), \n                   `Cosine Similarity` = round(corr_mat[index(),], 3))\n    table <- table[order(table[,2], decreasing = TRUE),]\n    rownames(table) <- NULL\n    datatable(table, options = list(pageLength = 3, searching=FALSE, \n                                    pagingType=\"simple\", lengthChange=FALSE)) %>% \n      formatStyle(columns = 1:3, 'text-align' = 'center')\n  })  \n  \n  # Page 1: first two rows \n  col <- colorRampPalette(c(\"#BB4444\", \"#EE9988\", \"#FFFFFF\", \"#77AADD\", \"#4477AA\"))\n  \n  output$corrplot1_1 <- renderPlot({\n    corrplot(pm_corr[index(),,drop=FALSE], is.corr=FALSE, bg=\"#F8F8FF\",\n             col=myCol(200), tl.col=\"black\",\n             tl.cex=0.8, cl.pos=\"n\")\n  })\n  \n  output$corrplot1_2 <- renderPlot({\n    corrplot(corr_mat[index(),,drop=FALSE], is.corr=FALSE, \n             tl.col=\"black\", method = \"shade\", col = col(200),\n             p.mat = corr_mat[index(),,drop=FALSE] %>% round(1), \n             insig = \"p-value\", tl.srt = 0, tl.offset = 1, \n             tl.cex=0.8,  cl.pos=\"n\")\n    \n  })\n  \n\n  \n  output$selected_sig_1 <- renderPlot({\n    pmsignature:::visPMS_ind(Fs[[index()]], 5, isScale = TRUE)\n  })\n  \n  # Page 1: selected signature\n  \n  output$selected_sig_full_1 <- renderPlot({\n    visPMS_full_modified(convertSignatureMatrixToVector(Fs[[index()]], c(6,4,4)), 3, FALSE)\n  })\n  \n  output$selected_sig_text_1 <- renderText({\n    HTML(paste0(\"<b>Type:</b> pmsignature D\", index(), \"</br>\",\n                \"<b>\", \"Cancer Membership:</b> \", paste(names(which(pm_corr[index(),]==1)), collapse = \", \")))\n  })\n  \n  # the most similarsignature\n  \n  output$selected_sig_full_1_1 <- renderPlot({\n    visPMS_full_modified(sig_full[,rank1()+3], 3, FALSE)\n  })\n  \n  \n  output$selected_sig_text_1_1 <- renderText({\n    HTML(paste(\"<b>Type:</b> COSIMIC signature \", paste0(\"F\", rank1()), \"</br>\",\n               \"<b>Similarity(highest):</b> \", corr_mat[index(), rank1()] %>% round(3), \"</br>\",\"</b>\",\n               \"<b>\", \"Cancer Membership:\", \"</b>\",\n               paste(names(which(cosmic_corr[rank1(),]==1)), collapse = \", \")))\n  })\n  \n  # self-defined signature\n  output$selected1_1 <- renderValueBox({\n    valueBox(\n      paste0(\"D\", index()), \"pmsignature\", icon = icon(\"list\"),\n      color = \"blue\"\n    )\n  })\n  \n  output$highest <- renderValueBox({\n    valueBox(\n      paste0(\"F\", rank1()), \"Most similar COSMIC\", icon(\"thumbs-up\", lib = \"glyphicon\"),\n      color = \"red\"\n    )\n  })\n  \n  output$selected1_2 <- renderValueBox({\n    valueBox(\n      paste0(\"F\", indexS()), \"COSMIC input\", icon = icon(\"list\"),\n      color = \"yellow\"\n    )\n  })\n  \n\n  output$selected_sig_full_1_2 <- renderPlot({\n    visPMS_full_modified(sig_full[,indexS()+3], 3, FALSE)\n  })\n  \n  \n  output$selected_sig_text_1_2 <- renderText({\n    HTML(paste(\"<b>Type:</b> COSIMIC signature \", paste0(\"F\", indexS()), \"</br>\",\n               \"<b>Similarity(selected):</b> \", corr_mat[index(), indexS()] %>% round(3), \"</br>\",\"</b>\",\n               \"<b>\", \"Cancer Membership:\", \"</b>\",\n               paste(names(which(cosmic_corr[indexS(),]==1)), collapse = \", \")))\n  })\n  \n  \n  \n  ########\n  # Page 2\n  ########\n  index2 <- reactive({\n    as.numeric(input$N_F)\n  })\n  \n  indexS2 <- reactive({\n    as.numeric(input$N_S_D)\n  })\n  \n  \n  output$mytable2 = renderDataTable({\n    table <- cbind(`COSMIC` = paste0(\"F\", index2()),\n                   `pmsignature` = paste0(\"D\", 1:dim(corr_mat)[1]), \n                   `Similarity` = round(corr_mat[,index2()], 3))\n    table <- table[order(table[,3], decreasing = TRUE),]\n    rownames(table) <- NULL\n    datatable(table, options = list(pageLength = 3, searching=FALSE, \n                                    pagingType=\"simple\", lengthChange=FALSE)) %>% \n      formatStyle(columns = 1:3, 'text-align' = 'center')\n  })\n  \n\n  # Page 2: selected signature\n  \n  output$corrplot2_1 <- renderPlot({\n    corrplot(t(corr_mat)[index2(),,drop=FALSE], is.corr=FALSE, \n             tl.col=\"black\", method = \"shade\", col = col(200),\n             p.mat = t(corr_mat)[index2(),,drop=FALSE] %>% round(1),\n             insig = \"p-value\", tl.srt = 0, tl.offset = 1, \n             tl.cex=1.0,  cl.pos=\"n\")\n    \n  })\n  \n  output$corrplot2_2 <- renderPlot({\n    corrplot(cosmic_corr[index2(),,drop=FALSE], is.corr=FALSE, bg=\"#F8F8FF\",\n             col=myCol(200), tl.col=\"black\", \n             tl.cex=0.75, cl.pos=\"n\", cl.lim = c(0,1))\n    \n  })\n  \n  # Page 1: selected signature\n  \n  output$selected_sig_2 <- renderPlot({\n    visPMS_full_modified(sig_full[,index2()+3], 3, FALSE)\n  })\n  \n  # Page 1: selected signature\n  output$selected_sig_full_2 <- renderPlot({\n    visPMS_full_modified(sig_full[,index2()+3], 3, FALSE)\n  })\n  \n  output$selected_sig_text_2 <- renderText({\n    HTML(paste0(\"<b>Type:</b> COSMIC signature F\", index2(), \"</br>\",\n                \"<b>\", \"Cancer Membership:</b> \", paste(names(which(cosmic_corr[index2(),]==1)), collapse = \", \")))\n    \n  })\n  \n  # the most similar signature\n  output$selected_sig_full_2_1 <- renderPlot({\n    rank <- as.numeric(gsub(\"[^0-9.]\", \"\", names(sort(t(corr_mat)[index2(),], decreasing = TRUE)[1:1])))   \n    pmsignature:::visPMS_ind(Fs[[rank]], 5, isScale = TRUE)\n  })\n  \n  output$selected_sig_text_2_1 <- renderText({\n    rank <- as.numeric(gsub(\"[^0-9.]\", \"\", names(sort(t(corr_mat)[index2(),], decreasing = TRUE)[1:1])))   \n    HTML(paste(\"<b>Type:</b> pmsignature \", paste0(\"D\", rank), \"</br>\",\n               \"<b>Similarity(highest):</b> \", t(corr_mat)[index2(), rank] %>% round(3), \"</br>\",\"</b>\",\n               \"<b>\", \"Cancer Membership:\", \"</b>\",\n                paste(names(which(pm_corr[rank,]==1)), collapse = \", \")))\n  })\n  \n  # self-defined signature\n  output$selected2_1 <- renderValueBox({\n    valueBox(\n      paste0(\"F\", index2()), \"pmsignature\", icon = icon(\"list\"),\n      color = \"blue\"\n    )\n  })\n  \n  output$highest2 <- renderValueBox({\n    rank <- as.numeric(gsub(\"[^0-9.]\", \"\", names(sort(t(corr_mat)[index2(),], decreasing = TRUE)[1:1])))\n    valueBox(\n      paste0(\"D\", rank), \"Most similar pmsignature\", icon(\"thumbs-up\", lib = \"glyphicon\"),\n      color = \"red\"\n    )\n  })\n  \n\n  output$selected2_2 <- renderValueBox({\n    valueBox(\n      paste0(\"D\", indexS2()), \"COSMIC input\", icon = icon(\"list\"),\n      color = \"yellow\"\n    )\n  })\n  \n  output$selected_sig_full_2_2 <- renderPlot({\n    pmsignature:::visPMS_ind(Fs[[indexS2()]], 5, isScale = TRUE)\n  })\n  \n\n  output$selected_sig_text_2_2 <- renderText({\n    HTML(paste(\"<b>Type:</b> pmsignature \", paste0(\"D\", indexS2()), \"</br>\",\n               \"<b>Similarity(selected):</b> \", t(corr_mat)[index2(), indexS2()] %>% round(3), \"</br>\",\"</b>\",\n               \"<b>\", \"Cancer Membership:\", \"</b>\",\n               paste(names(which(pm_corr[indexS2(),]==1)), collapse = \", \")))\n  })\n  \n  ########\n  # Page 3\n  ########\n  fu_vector <- reactive({\n    unlist(strsplit(paste(input$signature1, sep=\",\"),\",\")) %>% as.numeric()\n  })\n  \n  output$similar_full <- renderPlot({\n    visPMS_full_modified(fu_vector(), 3, FALSE)\n  })\n\n  corr_full <- reactive({\n    corr_full <- rep(NA, dim(sig_full)[2]-3)\n    for(i in 1:(dim(sig_full)[2]-3)){\n      corr_full[i] <- getCosDistance(fu_vector(), sig_full[,i+3])\n    }\n    corr_full\n  })\n  \n  corr_vec_full_pm <- reactive({\n    corr_vec_full_pm <- rep(NA, length(Fs))\n    for(i in 1:length(Fs)){\n      input_sig <- convertSignatureMatrixToVector(Fs[[i]][-6,], c(6,4,4))\n      corr_vec_full_pm[i] <- getCosDistance(fu_vector(), input_sig)\n    }\n    corr_vec_full_pm  \n  })\n  \n  output$fu_box <- renderValueBox({\n    valueBox(\n      max(corr_full()) %>% round(3) %>% sprintf(\"%1.3f\",.), \n      paste0(\"Similarity\"),\n      color = \"blue\"\n    )\n  })\n  \n  output$fu_box2 <- renderValueBox({\n    valueBox(\n      max(corr_vec_full_pm()) %>% round(3) %>% sprintf(\"%1.3f\",.), \n      paste0(\"Similarity\"),\n      color = \"green\"\n    )\n  })\n  \n  output$fu_text <- renderText({\n    paste0(\"COSMIC signature F\",which.max(corr_full()))\n  })\n  \n  output$fu_text2 <- renderText({\n    paste0(\"pmsignature D\",which.max(corr_vec_full_pm()))\n  })\n  \n  output$fu_plot <- renderPlot({\n    visPMS_full_modified(sig_full[,which.max(corr_full())+3], 3, FALSE)\n  })\n  \n  output$fu_plot2 <- renderPlot({\n    pmsignature:::visPMS_ind(Fs[[which.max(corr_vec_full_pm())]][-6,], 5, isScale = TRUE)\n  })\n\n  output$fu_table = renderDataTable({\n    table <- cbind(`COSMIC signature` = paste0(\"F\", 1:length(corr_full())), \n                   `Cosine Similarity` = round(corr_full(), 3))\n    table <- table[order(table[,2], decreasing = TRUE),]\n    rownames(table) <- NULL\n    datatable(table, options = list(pageLength = 4, searching=FALSE, \n                                    pagingType=\"simple\", lengthChange=FALSE)) %>% \n      formatStyle(columns = 1:3, 'text-align' = 'center')\n  })  \n  \n  output$fu_table2 = renderDataTable({\n    table <- cbind(`pmsignature` = paste0(\"D\", 1:length(corr_vec_full_pm())), \n                   `Cosine Similarity` = round(corr_vec_full_pm(), 3))\n    table <- table[order(table[,2], decreasing = TRUE),]\n    rownames(table) <- NULL\n    datatable(table, options = list(pageLength = 4, searching=FALSE, \n                                    pagingType=\"simple\", lengthChange=FALSE)) %>% \n      formatStyle(columns = 1:3, 'text-align' = 'center')\n  })\n    \n  \n  ########\n  # Page 4\n  ########\n  \n  pm_vector <- reactive({\n    unlist(strsplit(paste(input$signature2, sep=\",\"),\",\")) %>% as.numeric()\n  })\n  \n  output$similar_pm <- renderPlot({\n    pmsignature:::visPMS_ind(matrix(pm_vector(), 5, 6), \n                             5, isScale = TRUE)\n  })\n  \n  corr_vec <- reactive({\n    corr_vec <- rep(NA, length(Fs))\n    for(i in 1:length(Fs)){\n      full_sig <- convertSignatureMatrixToVector(Fs[[i]], c(6,4,4,4,4))\n      input_sig <- convertSignatureMatrixToVector(matrix(pm_vector(), 5, 6), c(6,4,4,4,4))\n      corr_vec[i] <- getCosDistance(input_sig, full_sig)\n    }\n    corr_vec\n  })\n  \n  corr_vec_full <- reactive({\n    corr_vec_full <- rep(NA, dim(sig_full)[2]-3)\n    for(i in 1:(dim(sig_full)[2]-3)){\n      input_sig <- convertSignatureMatrixToVector(matrix(pm_vector(), 5, 6), c(6,4,4))\n      corr_vec_full[i] <- getCosDistance(input_sig, sig_full[,i+3])\n    }\n    corr_vec_full\n  })\n  \n  output$pm_box <- renderValueBox({\n    valueBox(\n      max(corr_vec()) %>% round(3) %>% sprintf(\"%1.3f\",.), \n      paste0(\"Similarity\"),\n      color = \"blue\"\n    )\n  })\n  \n  output$pm_box2 <- renderValueBox({\n    valueBox(\n      max(corr_vec_full()) %>% round(3) %>% sprintf(\"%1.3f\",.), \n      paste0(\"Similarity\"),\n      color = \"green\"\n    )\n  })\n  \n  output$pm_text <- renderText({\n    paste0(\"pmsignature D\",which.max(corr_vec()))\n  })\n  \n  output$pm_text2 <- renderText({\n    paste0(\"COSMIC signature F\",which.max(corr_vec_full()))\n  })\n  \n  output$pm_plot <- renderPlot({\n    pmsignature:::visPMS_ind(Fs[[which.max(corr_vec())]][-6,], 5, isScale = TRUE)\n  })\n  \n  output$pm_plot2 <- renderPlot({\n    visPMS_full_modified(sig_full[,which.max(corr_vec_full())+3], 3, FALSE)\n  })\n  \n  output$pm_table = renderDataTable({\n    table <- cbind(`pmsignature` = paste0(\"D\", 1:length(corr_vec())), \n                   `Cosine Similarity` = round(corr_vec(), 3))\n    table <- table[order(table[,2], decreasing = TRUE),]\n    rownames(table) <- NULL\n    datatable(table, options = list(pageLength = 4, searching=FALSE, \n                                    pagingType=\"simple\", lengthChange=FALSE)) %>% \n      formatStyle(columns = 1:3, 'text-align' = 'center')\n  })  \n  \n  output$pm_table2 = renderDataTable({\n    table <- cbind(`COSMIC signature` = paste0(\"F\", 1:length(corr_vec_full())), \n                   `Cosine Similarity` = round(corr_vec_full(), 3))\n    table <- table[order(table[,2], decreasing = TRUE),]\n    rownames(table) <- NULL\n    datatable(table, options = list(pageLength = 4, searching=FALSE, \n                                    pagingType=\"simple\", lengthChange=FALSE)) %>% \n      formatStyle(columns = 1:3, 'text-align' = 'center')\n  })\n\n  \n  \n}\n\n# Double check the title again\n# plot bottom is not reactive\n# implement importing csv file (R users and non-R users)\n# color blind for the pmsignature\n",
    "created" : 1551122413207.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "149849979",
    "id" : "DC95C560",
    "lastKnownWriteTime" : 1551214223,
    "last_content_update" : 1551214223,
    "path" : "/Volumes/GoogleDrive/My Drive/Project 4 - Tumor modeling/Github/P4-TumorModeling/Zhi_Scripts/iMutSig/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}